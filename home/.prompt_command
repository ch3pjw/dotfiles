#!/bin/bash
# NOTE colours will just fail silently if not present
source $HOME/.bash_colors

function _padding {
    local size=$1
    local result
    printf -v result "%${size}s" ' '
    echo "$result"
}
function _repeat_chars {
    local char=$1
    local size=$2
    local temp_str=$(_padding ${size})
    echo ${temp_str// /${char}}
}

function prompt_command {
    local exit_status=$? # Must be the first thing we do
    local exit_status_text exit_status_text_color
    if [[ $exit_status == 0 ]]; then
        exit_status_text=✓
        exit_status_text_color=${BGreen}
    else
        exit_status_text=✗
        exit_status_text_color=${BRed}
    fi
    exit_status_text_color=${exit_status_text_color}${exit_status_text}${Color_Off}

    # Must run this early because when we use $() this adds to our jobs count
    local total_jobs=$(jobs | wc -l)
    local stopped_jobs=$(jobs -s | wc -l)
    local jobs_text=' ' jobs_text_color=' '
    if [[ ${total_jobs} != 0 ]]; then
        if [[ ${stopped_jobs} == 0 ]]; then
            jobs_text=" [${total_jobs}] "
            jobs_text_color=${LightGray}${jobs_text}${Color_Off}
        else
            jobs_text=" [${stopped_jobs}/${total_jobs}] "
            jobs_text_color="${LightGray} [${BRed}${stopped_jobs}${LightGray}/${total_jobs}] ${Color_Off}"
        fi
    fi

    local hostname=$(echo $HOSTNAME | sed -e 's/\..*//')
    local username=$(whoami)
    local host_text=${username}@${hostname}
    local host_text_color=${LightGray}${host_text}${Color_Off}

    local pwd_text="$(pwd | sed "s|$HOME|~|")"

    local git_text git_text_color git_ahead
    if git branch &> /dev/null; then
        # git is working and we're on a git branch
        if echo `git status` | grep "nothing to commit" > /dev/null 2>&1; then
            # Clean repository - nothing to commit
            git_text=" $(__git_ps1 "(%s)") "
            git_text_color=${Green}${git_text}${Color_Off}
        elif echo `git status` | grep "nothing added to commit but untracked files present" > /dev/null 2>&1; then
            # No changes but files to add
            git_text=" $(__git_ps1 "[%s]") "
            git_text_color=${Cyan}${git_text}${Color_Off}
        else
            # Changes to working tree
            git_text=" $(__git_ps1 "{%s}") "
            git_text_color=${Red}${git_text}${Color_Off}
        fi
        git_ahead=$(git status | awk '/Your branch is ahead/{print "→" $9 " "}\
            /Your branch is behind/{print $8 "← "}\
            /diverged/,/respectively/{if ($0 ~ /respectively/) print $6 "←→" $4 " "}')
        git_text="${git_text}${git_ahead}"
        if [[ "${git_ahead}" =~ "←→" ]]; then
            # Both push and pull differ:
            git_text_color="${git_text_color}${Yellow}${git_ahead%→*}${Red}${git_ahead#*←}${Color_Off}"
        elif [[ "${git_ahead}" =~ "→" ]]; then
            # Danger! We have stuff to push and it will be lost if we never
            # push it anywhere!
            git_text_color="${git_text_color}${Red}${git_ahead}${Color_Off}"
        else
            # Warning, you're not using the latest stuff, and you won't be able
            # to push any commits you make on top of the current one!
            git_text_color="${git_text_color}${Yellow}${git_ahead}${Color_Off}"
        fi
    else
        # prompt component when not in git
        git_text=' '
        git_text_color=${git_text}
    fi

    local date_text=$(date +%H:%M)
    local date_text_color=${DarkGray}${date_text}${Color_Off}

    local prompt_char=${exit_status_text}
    local prompt_char_color=${exit_status_text_color}

    local line_1_padding=$(($COLUMNS - ${#pwd_text} - ${#git_text} - ${#date_text} -${#jobs_text}))
    if [[ ${line_1_padding} -gt 0 ]]; then
        # Everything fits on the info line
        line_1_padding="${DarkGray}$(_repeat_chars '─' ${line_1_padding})"
    elif [[ ${line_1_padding} == 0 ]]; then
        # Everything JUST fits on the info line
        line_1_padding=""
    else
        # We need to truncate our path because the info line is too short
        pwd_text=${pwd_text:$(((${line_1_padding} * -1) + 1))}
        pwd_text="…${pwd_text}"
        line_1_padding=""
    fi
    pwd_text_color=${BBlue}${pwd_text}${Color_Off}
    local line_1="${pwd_text_color}${git_text_color}${line_1_padding}${jobs_text_color}${date_text_color}"
    local line_2="${host_text_color} ${prompt_char_color} "
    PS1="\n${line_1}\n${line_2}"
}
